import React, { useEffect, useState } from 'react';
import './ShopProfile.css';
import { Link, useNavigate } from "react-router-dom";
import { EditOutlined, AppstoreOutlined,DeleteOutlined } from '@ant-design/icons';
import { getMyPostProducts, ListMyProfile } from '../../../api/auth';
import useEcomStore from '../../../store/ecom-store';

const ShopProfile: React.FC = () => {
  const [products, setProducts] = useState<any[]>([]);
  const [shopInfo, setShopInfo] = useState<any>(null);
  const token = useEcomStore((state: any) => state.token);

  useEffect(() => {
    const fetchMyProducts = async () => {
      try {
        if (!token) return;
        const res = await getMyPostProducts(token);
        const raw = res.data?.data || [];

        const mapped = raw.map((item: any) => {
          // ‚úÖ ‡∏î‡∏∂‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å ProductImage (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          const images =
            item?.Product?.ProductImage?.map((img: any) => `http://localhost:8080${img?.image_path}`)?.filter(Boolean) || [];

          return {
            postId: item?.ID,              // ‚úÖ ‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå (Post_a_New_Product.ID)
            productId: item?.Product?.ID,  // (‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≠‡∏¢‡∏´‡∏¢‡∏¥‡∏ö)
            id: item?.Product?.ID,
            name: item?.Product?.name,
            category: item?.Category?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
            price: item?.price || 0,
            // ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ)
            images,
          };
        });

        setProducts(mapped);
      } catch (err) {
        console.error("‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err);
      }
    };

    const fetchShopInfo = async () => {
      try {
        if (!token) return;
        const res = await ListMyProfile(token);
        setShopInfo(res.data?.data);
      } catch (err) {
        console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err);
      }
    };

    fetchMyProducts();
    fetchShopInfo();
  }, [token]);

  if (!shopInfo) return <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤...</p>;

  const {
    shop_name,
    slogan,
    shop_description,
    logo_path,
    Category,
    ShopAddress
  } = shopInfo;

  const categories = Category ? [Category.category_name] : [];

  return (
    <div className="shop-container">
      <div className="shop-header">
        <div className="shop-logo-box">
          <img src={'http://localhost:8080' + logo_path} alt="Shop Logo" className="shop-logo" />
        </div>
        <div className="shop-header-info">
          <h2 className="shop-name">{shop_name}</h2>
          <p className="shop-slogan">{slogan}</p>
        </div>
        <div className="icon-btn">

          <Link to="/user/profile/edit" aria-label="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå">
            <EditOutlined />
          </Link>
            <DeleteOutlined />


        </div>
      </div>

      <div className='card5'>
        <div className="shop-section">
          <h3>üõç ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô</h3>
          <div className="shop-description-box">
            {shop_description || <i>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡πâ‡∏≤‡∏ô</i>}
          </div>
        </div>

        <div className="shop-section">
          <h3>üì¶ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
          <div className="shop-categories">
            {categories.map((cat, index) => (
              <span key={index} className="shop-tag">{cat}</span>
            ))}
          </div>
          <br />
          {products.length !== 0 && (
            <Link to="/user/create-post" className="btn-action">
              <h3>üì§ ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
            </Link>
          )}
        </div>

        <div className="shop-section">
          <h3>üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô</h3>
          <div className="shop-address-box">
            <div><strong>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</strong> {ShopAddress?.address || <i>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</i>}</div>
            <div><strong>‡∏ï‡∏≥‡∏ö‡∏• / ‡πÅ‡∏Ç‡∏ß‡∏á:</strong> {ShopAddress?.sub_district || <i>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</i>}</div>
            <div><strong>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ / ‡πÄ‡∏Ç‡∏ï:</strong> {ShopAddress?.district || <i>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</i>}</div>
            <div><strong>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:</strong> {ShopAddress?.province || <i>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</i>}</div>
          </div>
        </div>
      </div>

      <div className="shop-section">
        <h3><AppstoreOutlined style={{ marginRight: 6 }} /> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå ({products.length})</h3>
        {products.length === 0 ? (
          <>
            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ</p>
            <Link to="/user/create-post" className="btn-action">
              <h3>üì§ ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏¢!</h3>
            </Link>
          </>
        ) : (
          <div className="product-list grid-wrap">
            {products.map((product) => (

              <ProductCard key={product.id} product={product} />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

// ‚îÄ‚îÄ ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡∏£‡∏π‡∏õ‡∏¢‡πà‡∏≠‡∏¢ (‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ) ‚îÄ‚îÄ
const ProductCard: React.FC<{ product: any }> = ({ product }) => {
  const imgs: string[] = Array.isArray(product.images) ? product.images : [];
  const [active, setActive] = useState(0);
  const navigate = useNavigate();

  return (
    <div className="product-card">
      <div className="product-edit-btn">
        <button
          onClick={() =>
            navigate(`/user/products/${product.postId}/edit`)
          }
        >

          <EditOutlined />
          <DeleteOutlined />
          
        </button>
      </div>

      {/* ‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å: ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ */}
      {imgs.length > 0 && (
        <img
          className="main-image"
          src={imgs[active]}
          alt={product.name}
          loading="lazy"
        />
      )}

      {/* ‡πÅ‡∏ñ‡∏ö‡∏£‡∏π‡∏õ‡∏¢‡πà‡∏≠‡∏¢: ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏£‡∏π‡∏õ */}
      {imgs.length > 1 && (
        <div className="image-thumbnails" role="listbox" aria-label="‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°">
          {imgs.map((src, i) => (
            <button
              key={i}
              type="button"
              className={`thumb ${i === active ? 'active' : ''}`}
              onClick={() => setActive(i)}
              aria-selected={i === active}
              title={`‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${i + 1}`}
            >
              <img src={src} alt={`‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà ${i + 1}`} loading="lazy" />
            </button>
          ))}
        </div>
      )}

      <h4 className="product-title">{product.name}</h4>
      <p className="product-cat">{product.category}</p>
      <p className="product-price">{product.price} ‡∏ö‡∏≤‡∏ó</p>
    </div>
  );
};

export default ShopProfile;
