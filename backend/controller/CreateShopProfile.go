package controller

import (
	"strings"

	"example.com/sa-example2/config"
	"example.com/sa-example2/entity"
	"github.com/gin-gonic/gin"
)

func CreateShopProfile(c *gin.Context) {
	var input struct {
		ShopName        string             `json:"shop_name" binding:"required"`
		Slogan          string             `json:"slogan" binding:"required"`
		ShopDescription string             `json:"shop_description" binding:"required"`
		LogoPath        string             `json:"logo_path" binding:"required"`
		Address         entity.ShopAddress `json:"address" binding:"required"`
		CategoryID      uint               `json:"category_id" binding:"required"`
		SellerID        uint               `json:"seller_id" binding:"required"`
	}

	db := config.DB()

	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	// üîΩ ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏´‡∏°
	var existing entity.ShopProfile
	if err := db.Where("seller_id = ?", input.SellerID).First(&existing).Error; err == nil {
		c.JSON(400, gin.H{"error": "‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"})
		return
	}

	tx := db.Begin()

	if err := tx.Create(&input.Address).Error; err != nil {
		tx.Rollback()
		c.JSON(500, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ"})
		return
	}

	shop := entity.ShopProfile{
		ShopName:        input.ShopName,
		Slogan:          input.Slogan,
		ShopDescription: input.ShopDescription,
		LogoPath:        input.LogoPath,
		AddressID:       &input.Address.ID,
		ShopCategoryID:  &input.CategoryID,
		SellerID:        &input.SellerID,
	}

	if err := tx.Create(&shop).Error; err != nil {
		tx.Rollback()

		// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å UNIQUE constraint ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (SQLite)
		if strings.Contains(err.Error(), "UNIQUE constraint failed") {
			c.JSON(400, gin.H{"error": "‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß"})
			return
		}

		c.JSON(500, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ"})
		return
	}

	tx.Commit()
	c.JSON(200, gin.H{"data": shop})
}
